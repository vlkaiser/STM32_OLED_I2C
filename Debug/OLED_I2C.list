
OLED_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000310c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa0  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800616c  0800616c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800616c  0800616c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000002c  080061a0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  080061a0  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb9b  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d7d  00000000  00000000  0002bbef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a103  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0cd  00000000  00000000  00048e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092017  00000000  00000000  00052ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002374  00000000  00000000  000e4f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031b4 	.word	0x080031b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080031b4 	.word	0x080031b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <drawBitmap>:
*/
/**************************************************************************/

void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w,
        int16_t h, uint16_t color, uint16_t bg)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
 8000226:	0004      	movs	r4, r0
 8000228:	0008      	movs	r0, r1
 800022a:	60ba      	str	r2, [r7, #8]
 800022c:	0019      	movs	r1, r3
 800022e:	230e      	movs	r3, #14
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	1c22      	adds	r2, r4, #0
 8000234:	801a      	strh	r2, [r3, #0]
 8000236:	230c      	movs	r3, #12
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	1c02      	adds	r2, r0, #0
 800023c:	801a      	strh	r2, [r3, #0]
 800023e:	1dbb      	adds	r3, r7, #6
 8000240:	1c0a      	adds	r2, r1, #0
 8000242:	801a      	strh	r2, [r3, #0]

    ssd1306_Fill(bg);		//Clear the screen
 8000244:	2338      	movs	r3, #56	; 0x38
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	0018      	movs	r0, r3
 800024e:	f002 fda9 	bl	8002da4 <ssd1306_Fill>

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000252:	1dbb      	adds	r3, r7, #6
 8000254:	2200      	movs	r2, #0
 8000256:	5e9b      	ldrsh	r3, [r3, r2]
 8000258:	3307      	adds	r3, #7
 800025a:	2b00      	cmp	r3, #0
 800025c:	da00      	bge.n	8000260 <drawBitmap+0x40>
 800025e:	3307      	adds	r3, #7
 8000260:	10db      	asrs	r3, r3, #3
 8000262:	001a      	movs	r2, r3
 8000264:	2318      	movs	r3, #24
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	801a      	strh	r2, [r3, #0]
	uint8_t byte = 0;
 800026a:	2317      	movs	r3, #23
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]

	//Height
	for (int16_t j = 0; j < h; j++, y++)
 8000272:	231e      	movs	r3, #30
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	2200      	movs	r2, #0
 8000278:	801a      	strh	r2, [r3, #0]
 800027a:	e09e      	b.n	80003ba <drawBitmap+0x19a>
	{
		//Width
		for (int16_t i = 0; i < w; i++)
 800027c:	231c      	movs	r3, #28
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
 8000284:	e07d      	b.n	8000382 <drawBitmap+0x162>
		{
				byte = bitmap[j * byteWidth + i / 8];		// Row/Col of byte
 8000286:	231e      	movs	r3, #30
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	2200      	movs	r2, #0
 800028c:	5e9b      	ldrsh	r3, [r3, r2]
 800028e:	2218      	movs	r2, #24
 8000290:	18ba      	adds	r2, r7, r2
 8000292:	2100      	movs	r1, #0
 8000294:	5e52      	ldrsh	r2, [r2, r1]
 8000296:	435a      	muls	r2, r3
 8000298:	231c      	movs	r3, #28
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	2100      	movs	r1, #0
 800029e:	5e5b      	ldrsh	r3, [r3, r1]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da00      	bge.n	80002a6 <drawBitmap+0x86>
 80002a4:	3307      	adds	r3, #7
 80002a6:	10db      	asrs	r3, r3, #3
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	18d3      	adds	r3, r2, r3
 80002ac:	001a      	movs	r2, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	189a      	adds	r2, r3, r2
 80002b2:	2317      	movs	r3, #23
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	7812      	ldrb	r2, [r2, #0]
 80002b8:	701a      	strb	r2, [r3, #0]

				for (int8_t cnt = 0; cnt < 8; cnt ++)
 80002ba:	231b      	movs	r3, #27
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e049      	b.n	8000358 <drawBitmap+0x138>
				{
					//Shift left to right through byte to get each bit if the return val > 0, there is a 1 in that space.
					if ( (byte & (0x80 >> cnt)) == 0)
 80002c4:	2317      	movs	r3, #23
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	221b      	movs	r2, #27
 80002cc:	18ba      	adds	r2, r7, r2
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	b252      	sxtb	r2, r2
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	4111      	asrs	r1, r2
 80002d6:	000a      	movs	r2, r1
 80002d8:	4013      	ands	r3, r2
 80002da:	d11a      	bne.n	8000312 <drawBitmap+0xf2>
					{
						//  If 0, Background
						ssd1306_DrawPixel( x + i + cnt, y, bg);
 80002dc:	230e      	movs	r3, #14
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	231c      	movs	r3, #28
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	18d3      	adds	r3, r2, r3
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	231b      	movs	r3, #27
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	18d3      	adds	r3, r2, r3
 80002f8:	b2d8      	uxtb	r0, r3
 80002fa:	230c      	movs	r3, #12
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b2d9      	uxtb	r1, r3
 8000302:	2338      	movs	r3, #56	; 0x38
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	001a      	movs	r2, r3
 800030c:	f002 fd9a 	bl	8002e44 <ssd1306_DrawPixel>
 8000310:	e019      	b.n	8000346 <drawBitmap+0x126>
					}
					else
					{
						//if not 0, Pixel Color
						ssd1306_DrawPixel( x + i + cnt, y, color );
 8000312:	230e      	movs	r3, #14
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	b2da      	uxtb	r2, r3
 800031a:	231c      	movs	r3, #28
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	b2da      	uxtb	r2, r3
 8000326:	231b      	movs	r3, #27
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	18d3      	adds	r3, r2, r3
 800032e:	b2d8      	uxtb	r0, r3
 8000330:	230c      	movs	r3, #12
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b2d9      	uxtb	r1, r3
 8000338:	2334      	movs	r3, #52	; 0x34
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	001a      	movs	r2, r3
 8000342:	f002 fd7f 	bl	8002e44 <ssd1306_DrawPixel>
				for (int8_t cnt = 0; cnt < 8; cnt ++)
 8000346:	211b      	movs	r1, #27
 8000348:	187b      	adds	r3, r7, r1
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b25b      	sxtb	r3, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	187b      	adds	r3, r7, r1
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	231b      	movs	r3, #27
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	b25b      	sxtb	r3, r3
 8000360:	2b07      	cmp	r3, #7
 8000362:	ddaf      	ble.n	80002c4 <drawBitmap+0xa4>
					}
				}
				// Increment x-pos by 1 byte
				i = i + 7;
 8000364:	211c      	movs	r1, #28
 8000366:	187b      	adds	r3, r7, r1
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	3307      	adds	r3, #7
 800036c:	b29a      	uxth	r2, r3
 800036e:	187b      	adds	r3, r7, r1
 8000370:	801a      	strh	r2, [r3, #0]
		for (int16_t i = 0; i < w; i++)
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	5e9b      	ldrsh	r3, [r3, r2]
 8000378:	b29b      	uxth	r3, r3
 800037a:	3301      	adds	r3, #1
 800037c:	b29a      	uxth	r2, r3
 800037e:	187b      	adds	r3, r7, r1
 8000380:	801a      	strh	r2, [r3, #0]
 8000382:	231c      	movs	r3, #28
 8000384:	18fa      	adds	r2, r7, r3
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	2100      	movs	r1, #0
 800038a:	5e52      	ldrsh	r2, [r2, r1]
 800038c:	2100      	movs	r1, #0
 800038e:	5e5b      	ldrsh	r3, [r3, r1]
 8000390:	429a      	cmp	r2, r3
 8000392:	da00      	bge.n	8000396 <drawBitmap+0x176>
 8000394:	e777      	b.n	8000286 <drawBitmap+0x66>
	for (int16_t j = 0; j < h; j++, y++)
 8000396:	211e      	movs	r1, #30
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	5e9b      	ldrsh	r3, [r3, r2]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	801a      	strh	r2, [r3, #0]
 80003a8:	210c      	movs	r1, #12
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	5e9b      	ldrsh	r3, [r3, r2]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	3301      	adds	r3, #1
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	801a      	strh	r2, [r3, #0]
 80003ba:	231e      	movs	r3, #30
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	2230      	movs	r2, #48	; 0x30
 80003c0:	18b9      	adds	r1, r7, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	5e9a      	ldrsh	r2, [r3, r2]
 80003c6:	2300      	movs	r3, #0
 80003c8:	5ecb      	ldrsh	r3, [r1, r3]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	da00      	bge.n	80003d0 <drawBitmap+0x1b0>
 80003ce:	e755      	b.n	800027c <drawBitmap+0x5c>
			}
		}

	  ssd1306_UpdateScreen();
 80003d0:	f002 fd0c 	bl	8002dec <ssd1306_UpdateScreen>
	  return;
 80003d4:	46c0      	nop			; (mov r8, r8)

}
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b009      	add	sp, #36	; 0x24
 80003da:	bd90      	pop	{r4, r7, pc}

080003dc <writeLargeFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeLargeFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	0004      	movs	r4, r0
 80003e4:	0008      	movs	r0, r1
 80003e6:	0011      	movs	r1, r2
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	250e      	movs	r5, #14
 80003ec:	197b      	adds	r3, r7, r5
 80003ee:	1c22      	adds	r2, r4, #0
 80003f0:	801a      	strh	r2, [r3, #0]
 80003f2:	240c      	movs	r4, #12
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	1c02      	adds	r2, r0, #0
 80003f8:	801a      	strh	r2, [r3, #0]
 80003fa:	260a      	movs	r6, #10
 80003fc:	19bb      	adds	r3, r7, r6
 80003fe:	1c0a      	adds	r2, r1, #0
 8000400:	801a      	strh	r2, [r3, #0]
	ssd1306_SetCursor(x, y);
 8000402:	197b      	adds	r3, r7, r5
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	193b      	adds	r3, r7, r4
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	0019      	movs	r1, r3
 8000410:	0010      	movs	r0, r2
 8000412:	f002 fe4b 	bl	80030ac <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, color);
 8000416:	19bb      	adds	r3, r7, r6
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <writeLargeFont+0x58>)
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	6811      	ldr	r1, [r2, #0]
 8000422:	6852      	ldr	r2, [r2, #4]
 8000424:	f002 fe18 	bl	8003058 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000428:	f002 fce0 	bl	8002dec <ssd1306_UpdateScreen>
	return;
 800042c:	46c0      	nop			; (mov r8, r8)
}
 800042e:	46bd      	mov	sp, r7
 8000430:	b005      	add	sp, #20
 8000432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000434:	20000024 	.word	0x20000024

08000438 <writeMedFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeMedFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	0004      	movs	r4, r0
 8000440:	0008      	movs	r0, r1
 8000442:	0011      	movs	r1, r2
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	250e      	movs	r5, #14
 8000448:	197b      	adds	r3, r7, r5
 800044a:	1c22      	adds	r2, r4, #0
 800044c:	801a      	strh	r2, [r3, #0]
 800044e:	240c      	movs	r4, #12
 8000450:	193b      	adds	r3, r7, r4
 8000452:	1c02      	adds	r2, r0, #0
 8000454:	801a      	strh	r2, [r3, #0]
 8000456:	260a      	movs	r6, #10
 8000458:	19bb      	adds	r3, r7, r6
 800045a:	1c0a      	adds	r2, r1, #0
 800045c:	801a      	strh	r2, [r3, #0]
	ssd1306_SetCursor(x, y);
 800045e:	197b      	adds	r3, r7, r5
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	b2da      	uxtb	r2, r3
 8000464:	193b      	adds	r3, r7, r4
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	0019      	movs	r1, r3
 800046c:	0010      	movs	r0, r2
 800046e:	f002 fe1d 	bl	80030ac <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, color);
 8000472:	19bb      	adds	r3, r7, r6
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4a05      	ldr	r2, [pc, #20]	; (8000490 <writeMedFont+0x58>)
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	6811      	ldr	r1, [r2, #0]
 800047e:	6852      	ldr	r2, [r2, #4]
 8000480:	f002 fdea 	bl	8003058 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000484:	f002 fcb2 	bl	8002dec <ssd1306_UpdateScreen>
	return;
 8000488:	46c0      	nop			; (mov r8, r8)
}
 800048a:	46bd      	mov	sp, r7
 800048c:	b005      	add	sp, #20
 800048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000490:	2000001c 	.word	0x2000001c

08000494 <writeSmFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeSmFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	0004      	movs	r4, r0
 800049c:	0008      	movs	r0, r1
 800049e:	0011      	movs	r1, r2
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	250e      	movs	r5, #14
 80004a4:	197b      	adds	r3, r7, r5
 80004a6:	1c22      	adds	r2, r4, #0
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	1c02      	adds	r2, r0, #0
 80004b0:	801a      	strh	r2, [r3, #0]
 80004b2:	260a      	movs	r6, #10
 80004b4:	19bb      	adds	r3, r7, r6
 80004b6:	1c0a      	adds	r2, r1, #0
 80004b8:	801a      	strh	r2, [r3, #0]
	ssd1306_SetCursor(x, y);
 80004ba:	197b      	adds	r3, r7, r5
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f002 fdef 	bl	80030ac <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, color);
 80004ce:	19bb      	adds	r3, r7, r6
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <writeSmFont+0x58>)
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	6811      	ldr	r1, [r2, #0]
 80004da:	6852      	ldr	r2, [r2, #4]
 80004dc:	f002 fdbc 	bl	8003058 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80004e0:	f002 fc84 	bl	8002dec <ssd1306_UpdateScreen>
	return;
 80004e4:	46c0      	nop			; (mov r8, r8)
}
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b005      	add	sp, #20
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ec:	20000014 	.word	0x20000014

080004f0 <writeTinyFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeTinyFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	0004      	movs	r4, r0
 80004f8:	0008      	movs	r0, r1
 80004fa:	0011      	movs	r1, r2
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	250e      	movs	r5, #14
 8000500:	197b      	adds	r3, r7, r5
 8000502:	1c22      	adds	r2, r4, #0
 8000504:	801a      	strh	r2, [r3, #0]
 8000506:	240c      	movs	r4, #12
 8000508:	193b      	adds	r3, r7, r4
 800050a:	1c02      	adds	r2, r0, #0
 800050c:	801a      	strh	r2, [r3, #0]
 800050e:	260a      	movs	r6, #10
 8000510:	19bb      	adds	r3, r7, r6
 8000512:	1c0a      	adds	r2, r1, #0
 8000514:	801a      	strh	r2, [r3, #0]
	ssd1306_SetCursor(x, y);
 8000516:	197b      	adds	r3, r7, r5
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	193b      	adds	r3, r7, r4
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	0019      	movs	r1, r3
 8000524:	0010      	movs	r0, r2
 8000526:	f002 fdc1 	bl	80030ac <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_6x8, color);
 800052a:	19bb      	adds	r3, r7, r6
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <writeTinyFont+0x58>)
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	6811      	ldr	r1, [r2, #0]
 8000536:	6852      	ldr	r2, [r2, #4]
 8000538:	f002 fd8e 	bl	8003058 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800053c:	f002 fc56 	bl	8002dec <ssd1306_UpdateScreen>
	return;
 8000540:	46c0      	nop			; (mov r8, r8)
}
 8000542:	46bd      	mov	sp, r7
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	2000000c 	.word	0x2000000c

0800054c <clearScreen>:

void clearScreen(uint16_t color)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	0002      	movs	r2, r0
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	801a      	strh	r2, [r3, #0]
	ssd1306_Fill(color);
 8000558:	1dbb      	adds	r3, r7, #6
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	0018      	movs	r0, r3
 8000560:	f002 fc20 	bl	8002da4 <ssd1306_Fill>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <programInit>:
* @param[in]			- void
* @return				- void
*
* @note					-
******************************************************************************************************/
void programInit() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SPI_Led_GPIO_Port, SPI_Led_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	2200      	movs	r2, #0
 8000576:	2120      	movs	r1, #32
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fdc6 	bl	800110a <HAL_GPIO_WritePin>
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <loop>:

void loop() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16

	// Blue button pressed - repeat the test
    if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET) {
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	019b      	lsls	r3, r3, #6
 800058e:	4a3d      	ldr	r2, [pc, #244]	; (8000684 <loop+0x100>)
 8000590:	0019      	movs	r1, r3
 8000592:	0010      	movs	r0, r2
 8000594:	f000 fd9c 	bl	80010d0 <HAL_GPIO_ReadPin>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d16f      	bne.n	800067c <loop+0xf8>
		// Indicate that test is running
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800059c:	2390      	movs	r3, #144	; 0x90
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fdb0 	bl	800110a <HAL_GPIO_WritePin>
		//HAL_Delay(150);

		//ssd1306_TestAll();
		//ssd1306_drawLightningArrow();
		drawBitmap(7, 20, (uint8_t *)JaktoolLogoBMP, JaktoolLogoWidth, JaktoolLogoHeight, White, Black);
 80005aa:	4a37      	ldr	r2, [pc, #220]	; (8000688 <loop+0x104>)
 80005ac:	2300      	movs	r3, #0
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2315      	movs	r3, #21
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2373      	movs	r3, #115	; 0x73
 80005ba:	2114      	movs	r1, #20
 80005bc:	2007      	movs	r0, #7
 80005be:	f7ff fe2f 	bl	8000220 <drawBitmap>

		HAL_Delay(150);
 80005c2:	2096      	movs	r0, #150	; 0x96
 80005c4:	f000 fb36 	bl	8000c34 <HAL_Delay>


		//Just screwing around....
		clearScreen(Black);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffbf 	bl	800054c <clearScreen>
		ssd1306_UpdateScreen();
 80005ce:	f002 fc0d 	bl	8002dec <ssd1306_UpdateScreen>

		writeLargeFont(0, 2, White, "OLED");
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <loop+0x108>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff feff 	bl	80003dc <writeLargeFont>
		writeMedFont(75, 2, White, "Pgm");
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <loop+0x10c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	204b      	movs	r0, #75	; 0x4b
 80005e6:	f7ff ff27 	bl	8000438 <writeMedFont>
		writeSmFont(0, 30, White, "Initializing...");
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <loop+0x110>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	211e      	movs	r1, #30
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff4f 	bl	8000494 <writeSmFont>
		writeTinyFont(50, 45, White, " /_(-_~)_/ ");
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <loop+0x114>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	212d      	movs	r1, #45	; 0x2d
 80005fc:	2032      	movs	r0, #50	; 0x32
 80005fe:	f7ff ff77 	bl	80004f0 <writeTinyFont>

		HAL_Delay(150);
 8000602:	2096      	movs	r0, #150	; 0x96
 8000604:	f000 fb16 	bl	8000c34 <HAL_Delay>

		// with the ssd lib
		ssd1306_Fill(White);
 8000608:	2001      	movs	r0, #1
 800060a:	f002 fbcb 	bl	8002da4 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800060e:	f002 fbed 	bl	8002dec <ssd1306_UpdateScreen>

		ssd1306_SetCursor(10, 2);
 8000612:	2102      	movs	r1, #2
 8000614:	200a      	movs	r0, #10
 8000616:	f002 fd49 	bl	80030ac <ssd1306_SetCursor>
		ssd1306_WriteString("OLED", Font_16x26, Black);
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <loop+0x118>)
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <loop+0x108>)
 800061e:	2300      	movs	r3, #0
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	f002 fd18 	bl	8003058 <ssd1306_WriteString>
		ssd1306_SetCursor(85, 2);
 8000628:	2102      	movs	r1, #2
 800062a:	2055      	movs	r0, #85	; 0x55
 800062c:	f002 fd3e 	bl	80030ac <ssd1306_SetCursor>
		ssd1306_WriteString("Pgm", Font_11x18, Black);
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <loop+0x11c>)
 8000632:	4817      	ldr	r0, [pc, #92]	; (8000690 <loop+0x10c>)
 8000634:	2300      	movs	r3, #0
 8000636:	6811      	ldr	r1, [r2, #0]
 8000638:	6852      	ldr	r2, [r2, #4]
 800063a:	f002 fd0d 	bl	8003058 <ssd1306_WriteString>
		ssd1306_SetCursor(10, 30);
 800063e:	211e      	movs	r1, #30
 8000640:	200a      	movs	r0, #10
 8000642:	f002 fd33 	bl	80030ac <ssd1306_SetCursor>
		ssd1306_WriteString("Initializing...", Font_7x10, Black);
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <loop+0x120>)
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <loop+0x110>)
 800064a:	2300      	movs	r3, #0
 800064c:	6811      	ldr	r1, [r2, #0]
 800064e:	6852      	ldr	r2, [r2, #4]
 8000650:	f002 fd02 	bl	8003058 <ssd1306_WriteString>
		ssd1306_SetCursor(40, 45);
 8000654:	212d      	movs	r1, #45	; 0x2d
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f002 fd28 	bl	80030ac <ssd1306_SetCursor>
		ssd1306_WriteString(" /_(-_~)_/ ", Font_6x8, Black);
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <loop+0x124>)
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <loop+0x114>)
 8000660:	2300      	movs	r3, #0
 8000662:	6811      	ldr	r1, [r2, #0]
 8000664:	6852      	ldr	r2, [r2, #4]
 8000666:	f002 fcf7 	bl	8003058 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 800066a:	f002 fbbf 	bl	8002dec <ssd1306_UpdateScreen>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fd47 	bl	800110a <HAL_GPIO_WritePin>
    }

	// Blink an LED
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	//HAL_Delay(150);
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	48000800 	.word	0x48000800
 8000688:	08003214 	.word	0x08003214
 800068c:	080031cc 	.word	0x080031cc
 8000690:	080031d4 	.word	0x080031d4
 8000694:	080031d8 	.word	0x080031d8
 8000698:	080031e8 	.word	0x080031e8
 800069c:	20000024 	.word	0x20000024
 80006a0:	2000001c 	.word	0x2000001c
 80006a4:	20000014 	.word	0x20000014
 80006a8:	2000000c 	.word	0x2000000c

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fa5c 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f80d 	bl	80006d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8d8 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 f8a6 	bl	800080c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006c0:	f000 f864 	bl	800078c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  programInit();
 80006c4:	f7ff ff52 	bl	800056c <programInit>
  ssd1306_Init();
 80006c8:	f002 fb00 	bl	8002ccc <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 80006cc:	f7ff ff5a 	bl	8000584 <loop>
 80006d0:	e7fc      	b.n	80006cc <main+0x20>

080006d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d2:	b590      	push	{r4, r7, lr}
 80006d4:	b099      	sub	sp, #100	; 0x64
 80006d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d8:	242c      	movs	r4, #44	; 0x2c
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2334      	movs	r3, #52	; 0x34
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 fd5e 	bl	80031a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	231c      	movs	r3, #28
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	0018      	movs	r0, r3
 80006ee:	2310      	movs	r3, #16
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 fd56 	bl	80031a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	003b      	movs	r3, r7
 80006fa:	0018      	movs	r0, r3
 80006fc:	231c      	movs	r3, #28
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f002 fd4f 	bl	80031a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2222      	movs	r2, #34	; 0x22
 800070c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2210      	movs	r2, #16
 800071e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	187b      	adds	r3, r7, r1
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f943 	bl	80019b4 <HAL_RCC_OscConfig>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000732:	f000 f913 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	211c      	movs	r1, #28
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2207      	movs	r2, #7
 800073c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2203      	movs	r2, #3
 8000742:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fcb3 	bl	80020c0 <HAL_RCC_ClockConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800075e:	f000 f8fd 	bl	800095c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000762:	003b      	movs	r3, r7
 8000764:	2222      	movs	r2, #34	; 0x22
 8000766:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800076e:	003b      	movs	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	003b      	movs	r3, r7
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fe1a 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000780:	f000 f8ec 	bl	800095c <Error_Handler>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b019      	add	sp, #100	; 0x64
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fcbb 	bl	8001144 <HAL_I2C_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 f8c3 	bl	800095c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C1_Init+0x74>)
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f852 	bl	8001884 <HAL_I2CEx_ConfigAnalogFilter>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 f8ba 	bl	800095c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 f895 	bl	800191c <HAL_I2CEx_ConfigDigitalFilter>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f8b1 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000450 	.word	0x20000450
 8000804:	40005400 	.word	0x40005400
 8000808:	2000090e 	.word	0x2000090e

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	2296      	movs	r2, #150	; 0x96
 800081a:	0212      	lsls	r2, r2, #8
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fead 	bl	80025b0 <HAL_UART_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f87f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000049c 	.word	0x2000049c
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b08b      	sub	sp, #44	; 0x2c
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	2414      	movs	r4, #20
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	2314      	movs	r3, #20
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f002 fc91 	bl	80031a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <MX_GPIO_Init+0xe4>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_GPIO_Init+0xe4>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0309      	lsls	r1, r1, #12
 800088c:	430a      	orrs	r2, r1
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_GPIO_Init+0xe4>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	031b      	lsls	r3, r3, #12
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	03c9      	lsls	r1, r1, #15
 80008a8:	430a      	orrs	r2, r1
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0289      	lsls	r1, r1, #10
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	029b      	lsls	r3, r3, #10
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	02c9      	lsls	r1, r1, #11
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	02db      	lsls	r3, r3, #11
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2390      	movs	r3, #144	; 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fc05 	bl	800110a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0192      	lsls	r2, r2, #6
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_GPIO_Init+0xe8>)
 800090c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000914:	193b      	adds	r3, r7, r4
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <MX_GPIO_Init+0xec>)
 8000918:	0019      	movs	r1, r3
 800091a:	0010      	movs	r0, r2
 800091c:	f000 fa60 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	0021      	movs	r1, r4
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2220      	movs	r2, #32
 8000926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2201      	movs	r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	187a      	adds	r2, r7, r1
 800093c:	2390      	movs	r3, #144	; 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fa4c 	bl	8000de0 <HAL_GPIO_Init>

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b00b      	add	sp, #44	; 0x2c
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	10210000 	.word	0x10210000
 8000958:	48000800 	.word	0x48000800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000962:	e7fe      	b.n	8000962 <Error_Handler+0x6>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	619a      	str	r2, [r3, #24]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0549      	lsls	r1, r1, #21
 800098c:	430a      	orrs	r2, r1
 800098e:	61da      	str	r2, [r3, #28]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_MspInit+0x44>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	055b      	lsls	r3, r3, #21
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	2314      	movs	r3, #20
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 fbf0 	bl	80031a4 <memset>
  if(hi2c->Instance==I2C1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <HAL_I2C_MspInit+0x90>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d132      	bne.n	8000a34 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	02c9      	lsls	r1, r1, #11
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	02db      	lsls	r3, r3, #11
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ea:	2114      	movs	r1, #20
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2212      	movs	r2, #18
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2201      	movs	r2, #1
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_I2C_MspInit+0x98>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 f9e4 	bl	8000de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0389      	lsls	r1, r1, #14
 8000a22:	430a      	orrs	r2, r1
 8000a24:	61da      	str	r2, [r3, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	039b      	lsls	r3, r3, #14
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00a      	add	sp, #40	; 0x28
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2314      	movs	r3, #20
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fba2 	bl	80031a4 <memset>
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_UART_MspInit+0x90>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d132      	bne.n	8000ad0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0289      	lsls	r1, r1, #10
 8000a90:	430a      	orrs	r2, r1
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	029b      	lsls	r3, r3, #10
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa2:	2114      	movs	r1, #20
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	187a      	adds	r2, r7, r1
 8000ac4:	2390      	movs	r3, #144	; 0x90
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f988 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b00a      	add	sp, #40	; 0x28
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f87a 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b42:	f7ff ffe4 	bl	8000b0e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b46:	f002 fb09 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fdaf 	bl	80006ac <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000b5c:	08006174 	.word	0x08006174
  ldr r2, =_sbss
 8000b60:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000b64:	20000524 	.word	0x20000524

08000b68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_COMP_IRQHandler>
	...

08000b6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <HAL_Init+0x24>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_Init+0x24>)
 8000b76:	2110      	movs	r1, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f809 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b82:	f7ff feef 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_InitTick+0x5c>)
 8000b9e:	681c      	ldr	r4, [r3, #0]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_InitTick+0x60>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	23fa      	movs	r3, #250	; 0xfa
 8000ba8:	0098      	lsls	r0, r3, #2
 8000baa:	f7ff faad 	bl	8000108 <__udivsi3>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	f7ff faa8 	bl	8000108 <__udivsi3>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f903 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e00f      	b.n	8000be8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d80b      	bhi.n	8000be6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f8e0 	bl	8000d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_InitTick+0x64>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b003      	add	sp, #12
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	001a      	movs	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	18d2      	adds	r2, r2, r3
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000520 	.word	0x20000520

08000c20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000520 	.word	0x20000520

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	0003      	movs	r3, r0
 8000c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_Delay+0x40>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001a      	movs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	f7ff ffe0 	bl	8000c20 <HAL_GetTick>
 8000c60:	0002      	movs	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b004      	add	sp, #16
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	0002      	movs	r2, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8c:	d828      	bhi.n	8000ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	33c0      	adds	r3, #192	; 0xc0
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	589b      	ldr	r3, [r3, r2]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	21ff      	movs	r1, #255	; 0xff
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	33c0      	adds	r3, #192	; 0xc0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cde:	e031      	b.n	8000d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	400b      	ands	r3, r1
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001c      	movs	r4, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	4023      	ands	r3, r4
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	3306      	adds	r3, #6
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18c3      	adds	r3, r0, r3
 8000d40:	3304      	adds	r3, #4
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <SysTick_Config+0x40>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d901      	bls.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e010      	b.n	8000d8c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <SysTick_Config+0x44>)
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	3a01      	subs	r2, #1
 8000d70:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	2103      	movs	r1, #3
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff ff7d 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SysTick_Config+0x44>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x44>)
 8000d86:	2207      	movs	r2, #7
 8000d88:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	00ffffff 	.word	0x00ffffff
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	210f      	movs	r1, #15
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffbf 	bl	8000d54 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e155      	b.n	800109c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x28>
 8000e06:	e146      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d00b      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	2201      	movs	r2, #1
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0xea>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x174>
 8000f52:	e0a0      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2dc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1ea>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1e6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1de>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	035b      	lsls	r3, r3, #13
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	039b      	lsls	r3, r3, #14
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2ca>
 80010a8:	e6a2      	b.n	8000df0 <HAL_GPIO_Init+0x10>
  } 
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b006      	add	sp, #24
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	000a      	movs	r2, r1
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	1cba      	adds	r2, r7, #2
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	4013      	ands	r3, r2
 80010e8:	d004      	beq.n	80010f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	e003      	b.n	80010fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	781b      	ldrb	r3, [r3, #0]
  }
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	0008      	movs	r0, r1
 8001114:	0011      	movs	r1, r2
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	1c02      	adds	r2, r0, #0
 800111a:	801a      	strh	r2, [r3, #0]
 800111c:	1c7b      	adds	r3, r7, #1
 800111e:	1c0a      	adds	r2, r1, #0
 8001120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001122:	1c7b      	adds	r3, r7, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112a:	1cbb      	adds	r3, r7, #2
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001132:	e003      	b.n	800113c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001134:	1cbb      	adds	r3, r7, #2
 8001136:	881a      	ldrh	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e082      	b.n	800125c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2241      	movs	r2, #65	; 0x41
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2240      	movs	r2, #64	; 0x40
 8001166:	2100      	movs	r1, #0
 8001168:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff fc1d 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2241      	movs	r2, #65	; 0x41
 8001176:	2124      	movs	r1, #36	; 0x24
 8001178:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	438a      	bics	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4934      	ldr	r1, [pc, #208]	; (8001264 <HAL_I2C_Init+0x120>)
 8001194:	400a      	ands	r2, r1
 8001196:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4931      	ldr	r1, [pc, #196]	; (8001268 <HAL_I2C_Init+0x124>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0209      	lsls	r1, r1, #8
 80011bc:	430a      	orrs	r2, r1
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	e007      	b.n	80011d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2184      	movs	r1, #132	; 0x84
 80011cc:	0209      	lsls	r1, r1, #8
 80011ce:	430a      	orrs	r2, r1
 80011d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d104      	bne.n	80011e4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	491f      	ldr	r1, [pc, #124]	; (800126c <HAL_I2C_Init+0x128>)
 80011f0:	430a      	orrs	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	491a      	ldr	r1, [pc, #104]	; (8001268 <HAL_I2C_Init+0x124>)
 8001200:	400a      	ands	r2, r1
 8001202:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	431a      	orrs	r2, r3
 800120e:	0011      	movs	r1, r2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	021a      	lsls	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69d9      	ldr	r1, [r3, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2241      	movs	r2, #65	; 0x41
 8001248:	2120      	movs	r1, #32
 800124a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2242      	movs	r2, #66	; 0x42
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f0ffffff 	.word	0xf0ffffff
 8001268:	ffff7fff 	.word	0xffff7fff
 800126c:	02008000 	.word	0x02008000

08001270 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	000c      	movs	r4, r1
 800127a:	0010      	movs	r0, r2
 800127c:	0019      	movs	r1, r3
 800127e:	230a      	movs	r3, #10
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	1c22      	adds	r2, r4, #0
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	2308      	movs	r3, #8
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	1c0a      	adds	r2, r1, #0
 8001292:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2241      	movs	r2, #65	; 0x41
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	d000      	beq.n	80012a2 <HAL_I2C_Mem_Write+0x32>
 80012a0:	e10c      	b.n	80014bc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_I2C_Mem_Write+0x42>
 80012a8:	232c      	movs	r3, #44	; 0x2c
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0ff      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_I2C_Mem_Write+0x5c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0f8      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012d4:	f7ff fca4 	bl	8000c20 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	0219      	lsls	r1, r3, #8
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2319      	movs	r3, #25
 80012e8:	2201      	movs	r2, #1
 80012ea:	f000 f975 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0e3      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2241      	movs	r2, #65	; 0x41
 80012fa:	2121      	movs	r1, #33	; 0x21
 80012fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2242      	movs	r2, #66	; 0x42
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	222c      	movs	r2, #44	; 0x2c
 8001316:	18ba      	adds	r2, r7, r2
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001322:	1dbb      	adds	r3, r7, #6
 8001324:	881c      	ldrh	r4, [r3, #0]
 8001326:	2308      	movs	r3, #8
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	230a      	movs	r3, #10
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	8819      	ldrh	r1, [r3, #0]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	0023      	movs	r3, r4
 800133e:	f000 f8c5 	bl	80014cc <I2C_RequestMemoryWrite>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d005      	beq.n	8001352 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	2100      	movs	r1, #0
 800134c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0b5      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001356:	b29b      	uxth	r3, r3
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d911      	bls.n	8001380 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	b2da      	uxtb	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	045c      	lsls	r4, r3, #17
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0023      	movs	r3, r4
 800137a:	f000 fa4d 	bl	8001818 <I2C_TransferConfig>
 800137e:	e012      	b.n	80013a6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138e:	b2da      	uxtb	r2, r3
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	049c      	lsls	r4, r3, #18
 8001394:	230a      	movs	r3, #10
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	8819      	ldrh	r1, [r3, #0]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	0023      	movs	r3, r4
 80013a2:	f000 fa39 	bl	8001818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 f952 	bl	8001656 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e081      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03a      	beq.n	800146a <HAL_I2C_Mem_Write+0x1fa>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d136      	bne.n	800146a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	0013      	movs	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	f000 f8e5 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e053      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d911      	bls.n	8001444 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	b2da      	uxtb	r2, r3
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	045c      	lsls	r4, r3, #17
 8001430:	230a      	movs	r3, #10
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	8819      	ldrh	r1, [r3, #0]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	2300      	movs	r3, #0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	0023      	movs	r3, r4
 800143e:	f000 f9eb 	bl	8001818 <I2C_TransferConfig>
 8001442:	e012      	b.n	800146a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	b2da      	uxtb	r2, r3
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	049c      	lsls	r4, r3, #18
 8001458:	230a      	movs	r3, #10
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	8819      	ldrh	r1, [r3, #0]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	0023      	movs	r3, r4
 8001466:	f000 f9d7 	bl	8001818 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d198      	bne.n	80013a6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f92a 	bl	80016d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001480:	1e03      	subs	r3, r0, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e01a      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2220      	movs	r2, #32
 800148e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	490b      	ldr	r1, [pc, #44]	; (80014c8 <HAL_I2C_Mem_Write+0x258>)
 800149c:	400a      	ands	r2, r1
 800149e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2241      	movs	r2, #65	; 0x41
 80014a4:	2120      	movs	r1, #32
 80014a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2242      	movs	r2, #66	; 0x42
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e000      	b.n	80014be <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
  }
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b007      	add	sp, #28
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	fe00e800 	.word	0xfe00e800

080014cc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	000c      	movs	r4, r1
 80014d6:	0010      	movs	r0, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	250a      	movs	r5, #10
 80014dc:	197b      	adds	r3, r7, r5
 80014de:	1c22      	adds	r2, r4, #0
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	2308      	movs	r3, #8
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	1dbb      	adds	r3, r7, #6
 80014ec:	1c0a      	adds	r2, r1, #0
 80014ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014f0:	1dbb      	adds	r3, r7, #6
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	045c      	lsls	r4, r3, #17
 80014fa:	197b      	adds	r3, r7, r5
 80014fc:	8819      	ldrh	r1, [r3, #0]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <I2C_RequestMemoryWrite+0xc4>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	0023      	movs	r3, r4
 8001506:	f000 f987 	bl	8001818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f8a0 	bl	8001656 <I2C_WaitOnTXISFlagUntilTimeout>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d001      	beq.n	800151e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e033      	b.n	8001586 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800151e:	1dbb      	adds	r3, r7, #6
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001526:	2308      	movs	r3, #8
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
 8001534:	e019      	b.n	800156a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001536:	2308      	movs	r3, #8
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	6a39      	ldr	r1, [r7, #32]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f881 	bl	8001656 <I2C_WaitOnTXISFlagUntilTimeout>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d001      	beq.n	800155c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e014      	b.n	8001586 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800155c:	2308      	movs	r3, #8
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800156a:	6a3a      	ldr	r2, [r7, #32]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	0013      	movs	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	f000 f82e 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d001      	beq.n	8001584 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bdb0      	pop	{r4, r5, r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	80002000 	.word	0x80002000

08001594 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d103      	bne.n	80015b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	619a      	str	r2, [r3, #24]
  }
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e8:	e021      	b.n	800162e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	d01e      	beq.n	800162e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f0:	f7ff fb16 	bl	8000c20 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d302      	bcc.n	8001606 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	2220      	movs	r2, #32
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2241      	movs	r2, #65	; 0x41
 8001616:	2120      	movs	r1, #32
 8001618:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2242      	movs	r2, #66	; 0x42
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2240      	movs	r2, #64	; 0x40
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4013      	ands	r3, r2
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	425a      	negs	r2, r3
 800163e:	4153      	adcs	r3, r2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	001a      	movs	r2, r3
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d0ce      	beq.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b004      	add	sp, #16
 8001654:	bd80      	pop	{r7, pc}

08001656 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001662:	e02b      	b.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f86e 	bl	800174c <I2C_IsAcknowledgeFailed>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e029      	b.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3301      	adds	r3, #1
 800167c:	d01e      	beq.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167e:	f7ff facf 	bl	8000c20 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	d302      	bcc.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d113      	bne.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	2220      	movs	r2, #32
 800169a:	431a      	orrs	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2241      	movs	r2, #65	; 0x41
 80016a4:	2120      	movs	r1, #32
 80016a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2242      	movs	r2, #66	; 0x42
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e007      	b.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d1cc      	bne.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e0:	e028      	b.n	8001734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 f82f 	bl	800174c <I2C_IsAcknowledgeFailed>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d001      	beq.n	80016f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e026      	b.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff fa93 	bl	8000c20 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d113      	bne.n	8001734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	2220      	movs	r2, #32
 8001712:	431a      	orrs	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2241      	movs	r2, #65	; 0x41
 800171c:	2120      	movs	r1, #32
 800171e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2242      	movs	r2, #66	; 0x42
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	2100      	movs	r1, #0
 800172e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e007      	b.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2220      	movs	r2, #32
 800173c:	4013      	ands	r3, r2
 800173e:	2b20      	cmp	r3, #32
 8001740:	d1cf      	bne.n	80016e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b004      	add	sp, #16
 800174a:	bd80      	pop	{r7, pc}

0800174c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2210      	movs	r2, #16
 8001760:	4013      	ands	r3, r2
 8001762:	2b10      	cmp	r3, #16
 8001764:	d151      	bne.n	800180a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001766:	e021      	b.n	80017ac <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3301      	adds	r3, #1
 800176c:	d01e      	beq.n	80017ac <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176e:	f7ff fa57 	bl	8000c20 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <I2C_IsAcknowledgeFailed+0x38>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2220      	movs	r2, #32
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2120      	movs	r1, #32
 8001796:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2242      	movs	r2, #66	; 0x42
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e02f      	b.n	800180c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d1d6      	bne.n	8001768 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2210      	movs	r2, #16
 80017c0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2220      	movs	r2, #32
 80017c8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fee1 	bl	8001594 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	490d      	ldr	r1, [pc, #52]	; (8001814 <I2C_IsAcknowledgeFailed+0xc8>)
 80017de:	400a      	ands	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	2204      	movs	r2, #4
 80017e8:	431a      	orrs	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2241      	movs	r2, #65	; 0x41
 80017f2:	2120      	movs	r1, #32
 80017f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2242      	movs	r2, #66	; 0x42
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	2100      	movs	r1, #0
 8001804:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	fe00e800 	.word	0xfe00e800

08001818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	0008      	movs	r0, r1
 8001822:	0011      	movs	r1, r2
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	240a      	movs	r4, #10
 8001828:	193b      	adds	r3, r7, r4
 800182a:	1c02      	adds	r2, r0, #0
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	2009      	movs	r0, #9
 8001830:	183b      	adds	r3, r7, r0
 8001832:	1c0a      	adds	r2, r1, #0
 8001834:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	0d51      	lsrs	r1, r2, #21
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	00d2      	lsls	r2, r2, #3
 8001844:	400a      	ands	r2, r1
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <I2C_TransferConfig+0x68>)
 8001848:	430a      	orrs	r2, r1
 800184a:	43d2      	mvns	r2, r2
 800184c:	401a      	ands	r2, r3
 800184e:	0011      	movs	r1, r2
 8001850:	193b      	adds	r3, r7, r4
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	059b      	lsls	r3, r3, #22
 8001856:	0d9a      	lsrs	r2, r3, #22
 8001858:	183b      	adds	r3, r7, r0
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	0418      	lsls	r0, r3, #16
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	4003      	ands	r3, r0
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	431a      	orrs	r2, r3
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b005      	add	sp, #20
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	03ff63ff 	.word	0x03ff63ff

08001884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2241      	movs	r2, #65	; 0x41
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b20      	cmp	r3, #32
 8001898:	d138      	bne.n	800190c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	5c9b      	ldrb	r3, [r3, r2]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e032      	b.n	800190e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	2101      	movs	r1, #1
 80018ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2241      	movs	r2, #65	; 0x41
 80018b4:	2124      	movs	r1, #36	; 0x24
 80018b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	438a      	bics	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4911      	ldr	r1, [pc, #68]	; (8001918 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2241      	movs	r2, #65	; 0x41
 80018fc:	2120      	movs	r1, #32
 80018fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
  }
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	ffffefff 	.word	0xffffefff

0800191c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d139      	bne.n	80019a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800193c:	2302      	movs	r3, #2
 800193e:	e033      	b.n	80019a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2241      	movs	r2, #65	; 0x41
 800194c:	2124      	movs	r1, #36	; 0x24
 800194e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2241      	movs	r2, #65	; 0x41
 8001996:	2120      	movs	r1, #32
 8001998:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
  }
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b004      	add	sp, #16
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	fffff0ff 	.word	0xfffff0ff

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 fb76 	bl	80020b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d100      	bne.n	80019d4 <HAL_RCC_OscConfig+0x20>
 80019d2:	e08e      	b.n	8001af2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d4:	4bc5      	ldr	r3, [pc, #788]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	220c      	movs	r2, #12
 80019da:	4013      	ands	r3, r2
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00e      	beq.n	80019fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4bc2      	ldr	r3, [pc, #776]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	220c      	movs	r2, #12
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d117      	bne.n	8001a1c <HAL_RCC_OscConfig+0x68>
 80019ec:	4bbf      	ldr	r3, [pc, #764]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	401a      	ands	r2, r3
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d10e      	bne.n	8001a1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fe:	4bbb      	ldr	r3, [pc, #748]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	4013      	ands	r3, r2
 8001a08:	d100      	bne.n	8001a0c <HAL_RCC_OscConfig+0x58>
 8001a0a:	e071      	b.n	8001af0 <HAL_RCC_OscConfig+0x13c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d000      	beq.n	8001a16 <HAL_RCC_OscConfig+0x62>
 8001a14:	e06c      	b.n	8001af0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f000 fb4c 	bl	80020b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x80>
 8001a24:	4bb1      	ldr	r3, [pc, #708]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4bb0      	ldr	r3, [pc, #704]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0249      	lsls	r1, r1, #9
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e02f      	b.n	8001a94 <HAL_RCC_OscConfig+0xe0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0xa2>
 8001a3c:	4bab      	ldr	r3, [pc, #684]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4baa      	ldr	r3, [pc, #680]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a42:	49ab      	ldr	r1, [pc, #684]	; (8001cf0 <HAL_RCC_OscConfig+0x33c>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4ba8      	ldr	r3, [pc, #672]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4ba7      	ldr	r3, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a4e:	49a9      	ldr	r1, [pc, #676]	; (8001cf4 <HAL_RCC_OscConfig+0x340>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e01e      	b.n	8001a94 <HAL_RCC_OscConfig+0xe0>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10e      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc8>
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4ba2      	ldr	r3, [pc, #648]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	02c9      	lsls	r1, r1, #11
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b9f      	ldr	r3, [pc, #636]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0249      	lsls	r1, r1, #9
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xe0>
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a82:	499b      	ldr	r1, [pc, #620]	; (8001cf0 <HAL_RCC_OscConfig+0x33c>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b98      	ldr	r3, [pc, #608]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b97      	ldr	r3, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001a8e:	4999      	ldr	r1, [pc, #612]	; (8001cf4 <HAL_RCC_OscConfig+0x340>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8c0 	bl	8000c20 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f8bb 	bl	8000c20 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e2fd      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xf2>
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f8ab 	bl	8000c20 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8a6 	bl	8000c20 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2e8      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x11c>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x14a>
 8001afc:	e06c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b08:	4b78      	ldr	r3, [pc, #480]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11f      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1a0>
 8001b14:	4b75      	ldr	r3, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	23c0      	movs	r3, #192	; 0xc0
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b71      	ldr	r3, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x188>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e2bb      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	22f8      	movs	r2, #248	; 0xf8
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00da      	lsls	r2, r3, #3
 8001b4c:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e041      	b.n	8001bd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d024      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff f85a 	bl	8000c20 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff f855 	bl	8000c20 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e297      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	22f8      	movs	r2, #248	; 0xf8
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00da      	lsls	r2, r3, #3
 8001b9e:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	438a      	bics	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f835 	bl	8000c20 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f830 	bl	8000c20 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e272      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d1f1      	bne.n	8001bbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4013      	ands	r3, r2
 8001be0:	d036      	beq.n	8001c50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f813 	bl	8000c20 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff f80e 	bl	8000c20 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e250      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f1      	beq.n	8001c00 <HAL_RCC_OscConfig+0x24c>
 8001c1c:	e018      	b.n	8001c50 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	438a      	bics	r2, r1
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe fff9 	bl	8000c20 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c34:	f7fe fff4 	bl	8000c20 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e236      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d1f1      	bne.n	8001c34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2204      	movs	r2, #4
 8001c56:	4013      	ands	r3, r2
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2a8>
 8001c5a:	e0b5      	b.n	8001dc8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	055b      	lsls	r3, r3, #21
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d111      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	0549      	lsls	r1, r1, #21
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	055b      	lsls	r3, r3, #21
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c8c:	231f      	movs	r3, #31
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_RCC_OscConfig+0x344>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d11a      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x344>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_OscConfig+0x344>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0049      	lsls	r1, r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7fe ffb7 	bl	8000c20 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7fe ffb2 	bl	8000c20 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f4      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x344>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x348>
 8001cde:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	4b02      	ldr	r3, [pc, #8]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	621a      	str	r2, [r3, #32]
 8001cea:	e035      	b.n	8001d58 <HAL_RCC_OscConfig+0x3a4>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	fffeffff 	.word	0xfffeffff
 8001cf4:	fffbffff 	.word	0xfffbffff
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x36a>
 8001d04:	4bca      	ldr	r3, [pc, #808]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4bc9      	ldr	r3, [pc, #804]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	621a      	str	r2, [r3, #32]
 8001d10:	4bc7      	ldr	r3, [pc, #796]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	4bc6      	ldr	r3, [pc, #792]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d16:	2104      	movs	r1, #4
 8001d18:	438a      	bics	r2, r1
 8001d1a:	621a      	str	r2, [r3, #32]
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x3a4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x38c>
 8001d26:	4bc2      	ldr	r3, [pc, #776]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	4bc1      	ldr	r3, [pc, #772]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	621a      	str	r2, [r3, #32]
 8001d32:	4bbf      	ldr	r3, [pc, #764]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d34:	6a1a      	ldr	r2, [r3, #32]
 8001d36:	4bbe      	ldr	r3, [pc, #760]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	621a      	str	r2, [r3, #32]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0x3a4>
 8001d40:	4bbb      	ldr	r3, [pc, #748]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4bba      	ldr	r3, [pc, #744]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	4bb8      	ldr	r3, [pc, #736]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4bb7      	ldr	r3, [pc, #732]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d52:	2104      	movs	r1, #4
 8001d54:	438a      	bics	r2, r1
 8001d56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d014      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7fe ff5e 	bl	8000c20 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe ff59 	bl	8000c20 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4aaf      	ldr	r2, [pc, #700]	; (8002034 <HAL_RCC_OscConfig+0x680>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e19a      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	4bac      	ldr	r3, [pc, #688]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3b6>
 8001d88:	e013      	b.n	8001db2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff49 	bl	8000c20 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff44 	bl	8000c20 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4aa5      	ldr	r2, [pc, #660]	; (8002034 <HAL_RCC_OscConfig+0x680>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e185      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4ba1      	ldr	r3, [pc, #644]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db2:	231f      	movs	r3, #31
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	4b9b      	ldr	r3, [pc, #620]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	499d      	ldr	r1, [pc, #628]	; (8002038 <HAL_RCC_OscConfig+0x684>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dda:	4b95      	ldr	r3, [pc, #596]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dde:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001de0:	2104      	movs	r1, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001de6:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	4b91      	ldr	r3, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff15 	bl	8000c20 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dfc:	f7fe ff10 	bl	8000c20 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e152      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d0f1      	beq.n	8001dfc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e18:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	22f8      	movs	r2, #248	; 0xf8
 8001e1e:	4393      	bics	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	00da      	lsls	r2, r3, #3
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2e:	e034      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	3305      	adds	r3, #5
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e38:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3c:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	438a      	bics	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e44:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	22f8      	movs	r2, #248	; 0xf8
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	00da      	lsls	r2, r3, #3
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5a:	e01e      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e5c:	4b74      	ldr	r3, [pc, #464]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e60:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	430a      	orrs	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e68:	4b71      	ldr	r3, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fed4 	bl	8000c20 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7e:	f7fe fecf 	bl	8000c20 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e111      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e90:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d05c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ea4:	4b62      	ldr	r3, [pc, #392]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	220c      	movs	r2, #12
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d00e      	beq.n	8001ece <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001eb0:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d114      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d040      	beq.n	8001f5c <HAL_RCC_OscConfig+0x5a8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d03c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0e6      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef2:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0249      	lsls	r1, r1, #9
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe90 	bl	8000c20 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f06:	f7fe fe8b 	bl	8000c20 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0cd      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x552>
 8001f24:	e01b      	b.n	8001f5e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f2c:	4943      	ldr	r1, [pc, #268]	; (800203c <HAL_RCC_OscConfig+0x688>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe fe75 	bl	8000c20 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f3c:	f7fe fe70 	bl	8000c20 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0b2      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	025b      	lsls	r3, r3, #9
 8001f56:	4013      	ands	r3, r2
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x588>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f5c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d100      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5b4>
 8001f66:	e0a4      	b.n	80020b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d100      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5c2>
 8001f74:	e078      	b.n	8002068 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d14c      	bne.n	8002018 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001f84:	492e      	ldr	r1, [pc, #184]	; (8002040 <HAL_RCC_OscConfig+0x68c>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fe49 	bl	8000c20 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fe44 	bl	8000c20 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e086      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	049b      	lsls	r3, r3, #18
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_RCC_OscConfig+0x690>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	0449      	lsls	r1, r1, #17
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fe17 	bl	8000c20 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe fe12 	bl	8000c20 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e054      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	049b      	lsls	r3, r3, #18
 8002012:	4013      	ands	r3, r2
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x644>
 8002016:	e04c      	b.n	80020b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_OscConfig+0x67c>)
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <HAL_RCC_OscConfig+0x68c>)
 8002020:	400a      	ands	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fdfc 	bl	8000c20 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x6a6>
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	00001388 	.word	0x00001388
 8002038:	efffffff 	.word	0xefffffff
 800203c:	fffeffff 	.word	0xfffeffff
 8002040:	feffffff 	.word	0xfeffffff
 8002044:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fdea 	bl	8000c20 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e02c      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x708>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x694>
 8002066:	e024      	b.n	80020b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e01f      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_OscConfig+0x708>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x708>)
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	23c0      	movs	r3, #192	; 0xc0
 8002084:	025b      	lsls	r3, r3, #9
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	429a      	cmp	r2, r3
 800208e:	d10e      	bne.n	80020ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	220f      	movs	r2, #15
 8002094:	401a      	ands	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	23f0      	movs	r3, #240	; 0xf0
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b008      	add	sp, #32
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0bf      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b61      	ldr	r3, [pc, #388]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d911      	bls.n	8002106 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b5e      	ldr	r3, [pc, #376]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0a6      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d015      	beq.n	800213c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2204      	movs	r2, #4
 8002116:	4013      	ands	r3, r2
 8002118:	d006      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002120:	21e0      	movs	r1, #224	; 0xe0
 8002122:	00c9      	lsls	r1, r1, #3
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	22f0      	movs	r2, #240	; 0xf0
 800212e:	4393      	bics	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d04c      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	4013      	ands	r3, r2
 8002158:	d120      	bne.n	800219c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07a      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	049b      	lsls	r3, r3, #18
 800216e:	4013      	ands	r3, r2
 8002170:	d114      	bne.n	800219c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06e      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	4013      	ands	r3, r2
 8002188:	d108      	bne.n	800219c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e062      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e05b      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fd36 	bl	8000c20 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	e009      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f7fe fd31 	bl	8000c20 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x1a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e042      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	220c      	movs	r2, #12
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1ec      	bne.n	80021ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d211      	bcs.n	8002212 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4393      	bics	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x19c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e020      	b.n	8002254 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_RCC_ClockConfig+0x1a8>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002230:	f000 f820 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1a0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1ac>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1b0>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fca1 	bl	8000b94 <HAL_InitTick>
  
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	00001388 	.word	0x00001388
 8002268:	fffff8ff 	.word	0xfffff8ff
 800226c:	08003350 	.word	0x08003350
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08f      	sub	sp, #60	; 0x3c
 8002278:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800227a:	2314      	movs	r3, #20
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	4a37      	ldr	r2, [pc, #220]	; (800235c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002282:	c313      	stmia	r3!, {r0, r1, r4}
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_RCC_GetSysClockFreq+0xec>)
 800228c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800228e:	c313      	stmia	r3!, {r0, r1, r4}
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	2300      	movs	r3, #0
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d006      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x52>
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d043      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xd0>
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d144      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022c4:	e044      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	220f      	movs	r2, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	2214      	movs	r2, #20
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	220f      	movs	r2, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	401a      	ands	r2, r3
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	025b      	lsls	r3, r3, #9
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f6:	481c      	ldr	r0, [pc, #112]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022f8:	f7fd ff06 	bl	8000108 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	001a      	movs	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	4353      	muls	r3, r2
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e01a      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	401a      	ands	r2, r3
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	429a      	cmp	r2, r3
 8002316:	d109      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_RCC_GetSysClockFreq+0xf8>)
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	001a      	movs	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	4353      	muls	r3, r2
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
 800232a:	e008      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	480e      	ldr	r0, [pc, #56]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4353      	muls	r3, r2
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002342:	e005      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002348:	e002      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800234e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b00f      	add	sp, #60	; 0x3c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	080031f4 	.word	0x080031f4
 8002360:	08003204 	.word	0x08003204
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	02dc6c00 	.word	0x02dc6c00

08002370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_RCC_GetHCLKFreq+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002388:	f7ff fff2 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 800238c:	0001      	movs	r1, r0
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	2207      	movs	r2, #7
 8002396:	4013      	ands	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	40d9      	lsrs	r1, r3
 800239e:	000b      	movs	r3, r1
}    
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08003360 	.word	0x08003360

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	4013      	ands	r3, r2
 80023ca:	d100      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023cc:	e08f      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2317      	movs	r3, #23
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	4013      	ands	r3, r2
 80023e0:	d111      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0549      	lsls	r1, r1, #21
 80023ec:	430a      	orrs	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	055b      	lsls	r3, r3, #21
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d11a      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b60      	ldr	r3, [pc, #384]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0049      	lsls	r1, r1, #1
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002420:	f7fe fbfe 	bl	8000c20 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7fe fbf9 	bl	8000c20 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0a6      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d0f0      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002448:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d034      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4013      	ands	r3, r2
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	429a      	cmp	r2, r3
 8002468:	d02c      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a4b      	ldr	r2, [pc, #300]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002474:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0249      	lsls	r1, r1, #9
 800247e:	430a      	orrs	r2, r1
 8002480:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002488:	4945      	ldr	r1, [pc, #276]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800248a:	400a      	ands	r2, r1
 800248c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fbc0 	bl	8000c20 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e009      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fbbb 	bl	8000c20 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a3c      	ldr	r2, [pc, #240]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e067      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a34      	ldr	r2, [pc, #208]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d8:	2317      	movs	r3, #23
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d105      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e2:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024e8:	492f      	ldr	r1, [pc, #188]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2203      	movs	r2, #3
 80024fe:	4393      	bics	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002526:	430a      	orrs	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2220      	movs	r2, #32
 8002530:	4013      	ands	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	2210      	movs	r2, #16
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002544:	430a      	orrs	r2, r1
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	4013      	ands	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002564:	430a      	orrs	r2, r1
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002584:	430a      	orrs	r2, r1
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	fffffcff 	.word	0xfffffcff
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	00001388 	.word	0x00001388
 80025a8:	efffffff 	.word	0xefffffff
 80025ac:	fffcffff 	.word	0xfffcffff

080025b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e044      	b.n	800264c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2274      	movs	r2, #116	; 0x74
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe fa37 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f830 	bl	8002658 <UART_SetConfig>
 80025f8:	0003      	movs	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e024      	b.n	800264c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f9a7 	bl	8002960 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	490d      	ldr	r1, [pc, #52]	; (8002654 <HAL_UART_Init+0xa4>)
 800261e:	400a      	ands	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	212a      	movs	r1, #42	; 0x2a
 800262e:	438a      	bics	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fa3f 	bl	8002ac8 <UART_CheckIdleState>
 800264a:	0003      	movs	r3, r0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}
 8002654:	ffffb7ff 	.word	0xffffb7ff

08002658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002660:	231e      	movs	r3, #30
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4aac      	ldr	r2, [pc, #688]	; (8002938 <UART_SetConfig+0x2e0>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4aa7      	ldr	r2, [pc, #668]	; (800293c <UART_SetConfig+0x2e4>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a9e      	ldr	r2, [pc, #632]	; (8002940 <UART_SetConfig+0x2e8>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a9a      	ldr	r2, [pc, #616]	; (8002944 <UART_SetConfig+0x2ec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d125      	bne.n	800272a <UART_SetConfig+0xd2>
 80026de:	4b9a      	ldr	r3, [pc, #616]	; (8002948 <UART_SetConfig+0x2f0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2203      	movs	r2, #3
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d00f      	beq.n	800270a <UART_SetConfig+0xb2>
 80026ea:	d304      	bcc.n	80026f6 <UART_SetConfig+0x9e>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d011      	beq.n	8002714 <UART_SetConfig+0xbc>
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d005      	beq.n	8002700 <UART_SetConfig+0xa8>
 80026f4:	e013      	b.n	800271e <UART_SetConfig+0xc6>
 80026f6:	231f      	movs	r3, #31
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e064      	b.n	80027ca <UART_SetConfig+0x172>
 8002700:	231f      	movs	r3, #31
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e05f      	b.n	80027ca <UART_SetConfig+0x172>
 800270a:	231f      	movs	r3, #31
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e05a      	b.n	80027ca <UART_SetConfig+0x172>
 8002714:	231f      	movs	r3, #31
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2208      	movs	r2, #8
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e055      	b.n	80027ca <UART_SetConfig+0x172>
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2210      	movs	r2, #16
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	e04f      	b.n	80027ca <UART_SetConfig+0x172>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <UART_SetConfig+0x2f4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d132      	bne.n	800279a <UART_SetConfig+0x142>
 8002734:	4b84      	ldr	r3, [pc, #528]	; (8002948 <UART_SetConfig+0x2f0>)
 8002736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002738:	23c0      	movs	r3, #192	; 0xc0
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	4013      	ands	r3, r2
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0252      	lsls	r2, r2, #9
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <UART_SetConfig+0x122>
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	0252      	lsls	r2, r2, #9
 800274a:	4293      	cmp	r3, r2
 800274c:	d802      	bhi.n	8002754 <UART_SetConfig+0xfc>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <UART_SetConfig+0x10e>
 8002752:	e01c      	b.n	800278e <UART_SetConfig+0x136>
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0292      	lsls	r2, r2, #10
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <UART_SetConfig+0x12c>
 800275c:	22c0      	movs	r2, #192	; 0xc0
 800275e:	0292      	lsls	r2, r2, #10
 8002760:	4293      	cmp	r3, r2
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0x118>
 8002764:	e013      	b.n	800278e <UART_SetConfig+0x136>
 8002766:	231f      	movs	r3, #31
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e02c      	b.n	80027ca <UART_SetConfig+0x172>
 8002770:	231f      	movs	r3, #31
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e027      	b.n	80027ca <UART_SetConfig+0x172>
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2204      	movs	r2, #4
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e022      	b.n	80027ca <UART_SetConfig+0x172>
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2208      	movs	r2, #8
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e01d      	b.n	80027ca <UART_SetConfig+0x172>
 800278e:	231f      	movs	r3, #31
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2210      	movs	r2, #16
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	e017      	b.n	80027ca <UART_SetConfig+0x172>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <UART_SetConfig+0x2f8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d104      	bne.n	80027ae <UART_SetConfig+0x156>
 80027a4:	231f      	movs	r3, #31
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e00d      	b.n	80027ca <UART_SetConfig+0x172>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a68      	ldr	r2, [pc, #416]	; (8002954 <UART_SetConfig+0x2fc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d104      	bne.n	80027c2 <UART_SetConfig+0x16a>
 80027b8:	231f      	movs	r3, #31
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e003      	b.n	80027ca <UART_SetConfig+0x172>
 80027c2:	231f      	movs	r3, #31
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2210      	movs	r2, #16
 80027c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d15c      	bne.n	8002890 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 80027d6:	231f      	movs	r3, #31
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d00d      	beq.n	80027fc <UART_SetConfig+0x1a4>
 80027e0:	dc02      	bgt.n	80027e8 <UART_SetConfig+0x190>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <UART_SetConfig+0x19a>
 80027e6:	e015      	b.n	8002814 <UART_SetConfig+0x1bc>
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00a      	beq.n	8002802 <UART_SetConfig+0x1aa>
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d00d      	beq.n	800280c <UART_SetConfig+0x1b4>
 80027f0:	e010      	b.n	8002814 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f2:	f7ff fdc7 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
        break;
 80027fa:	e012      	b.n	8002822 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <UART_SetConfig+0x300>)
 80027fe:	61bb      	str	r3, [r7, #24]
        break;
 8002800:	e00f      	b.n	8002822 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002802:	f7ff fd37 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
        break;
 800280a:	e00a      	b.n	8002822 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	61bb      	str	r3, [r7, #24]
        break;
 8002812:	e006      	b.n	8002822 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002818:	231e      	movs	r3, #30
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
        break;
 8002820:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d100      	bne.n	800282a <UART_SetConfig+0x1d2>
 8002828:	e079      	b.n	800291e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	005a      	lsls	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	18d2      	adds	r2, r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f7fd fc63 	bl	8000108 <__udivsi3>
 8002842:	0003      	movs	r3, r0
 8002844:	b29b      	uxth	r3, r3
 8002846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	d91b      	bls.n	8002886 <UART_SetConfig+0x22e>
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4a42      	ldr	r2, [pc, #264]	; (800295c <UART_SetConfig+0x304>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d817      	bhi.n	8002886 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	b29a      	uxth	r2, r3
 800285a:	200e      	movs	r0, #14
 800285c:	183b      	adds	r3, r7, r0
 800285e:	210f      	movs	r1, #15
 8002860:	438a      	bics	r2, r1
 8002862:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	2207      	movs	r2, #7
 800286c:	4013      	ands	r3, r2
 800286e:	b299      	uxth	r1, r3
 8002870:	183b      	adds	r3, r7, r0
 8002872:	183a      	adds	r2, r7, r0
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	183a      	adds	r2, r7, r0
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	e04b      	b.n	800291e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002886:	231e      	movs	r3, #30
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e046      	b.n	800291e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002890:	231f      	movs	r3, #31
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d00d      	beq.n	80028b6 <UART_SetConfig+0x25e>
 800289a:	dc02      	bgt.n	80028a2 <UART_SetConfig+0x24a>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <UART_SetConfig+0x254>
 80028a0:	e015      	b.n	80028ce <UART_SetConfig+0x276>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00a      	beq.n	80028bc <UART_SetConfig+0x264>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d00d      	beq.n	80028c6 <UART_SetConfig+0x26e>
 80028aa:	e010      	b.n	80028ce <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ac:	f7ff fd6a 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]
        break;
 80028b4:	e012      	b.n	80028dc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <UART_SetConfig+0x300>)
 80028b8:	61bb      	str	r3, [r7, #24]
        break;
 80028ba:	e00f      	b.n	80028dc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028bc:	f7ff fcda 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 80028c0:	0003      	movs	r3, r0
 80028c2:	61bb      	str	r3, [r7, #24]
        break;
 80028c4:	e00a      	b.n	80028dc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	61bb      	str	r3, [r7, #24]
        break;
 80028cc:	e006      	b.n	80028dc <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028d2:	231e      	movs	r3, #30
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
        break;
 80028da:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01d      	beq.n	800291e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	085a      	lsrs	r2, r3, #1
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	18d2      	adds	r2, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f7fd fc08 	bl	8000108 <__udivsi3>
 80028f8:	0003      	movs	r3, r0
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d908      	bls.n	8002916 <UART_SetConfig+0x2be>
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <UART_SetConfig+0x304>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d804      	bhi.n	8002916 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e003      	b.n	800291e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002916:	231e      	movs	r3, #30
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800292a:	231e      	movs	r3, #30
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b008      	add	sp, #32
 8002936:	bd80      	pop	{r7, pc}
 8002938:	efff69f3 	.word	0xefff69f3
 800293c:	ffffcfff 	.word	0xffffcfff
 8002940:	fffff4ff 	.word	0xfffff4ff
 8002944:	40013800 	.word	0x40013800
 8002948:	40021000 	.word	0x40021000
 800294c:	40004400 	.word	0x40004400
 8002950:	40004800 	.word	0x40004800
 8002954:	40004c00 	.word	0x40004c00
 8002958:	007a1200 	.word	0x007a1200
 800295c:	0000ffff 	.word	0x0000ffff

08002960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2201      	movs	r2, #1
 800296e:	4013      	ands	r3, r2
 8002970:	d00b      	beq.n	800298a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a4a      	ldr	r2, [pc, #296]	; (8002aa4 <UART_AdvFeatureConfig+0x144>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d00b      	beq.n	80029ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <UART_AdvFeatureConfig+0x148>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2204      	movs	r2, #4
 80029b2:	4013      	ands	r3, r2
 80029b4:	d00b      	beq.n	80029ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <UART_AdvFeatureConfig+0x14c>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <UART_AdvFeatureConfig+0x150>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2210      	movs	r2, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <UART_AdvFeatureConfig+0x154>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2220      	movs	r2, #32
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <UART_AdvFeatureConfig+0x158>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <UART_AdvFeatureConfig+0x15c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	035b      	lsls	r3, r3, #13
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10b      	bne.n	8002a7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <UART_AdvFeatureConfig+0x160>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	4013      	ands	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <UART_AdvFeatureConfig+0x164>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  }
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	fffdffff 	.word	0xfffdffff
 8002aa8:	fffeffff 	.word	0xfffeffff
 8002aac:	fffbffff 	.word	0xfffbffff
 8002ab0:	ffff7fff 	.word	0xffff7fff
 8002ab4:	ffffefff 	.word	0xffffefff
 8002ab8:	ffffdfff 	.word	0xffffdfff
 8002abc:	ffefffff 	.word	0xffefffff
 8002ac0:	ff9fffff 	.word	0xff9fffff
 8002ac4:	fff7ffff 	.word	0xfff7ffff

08002ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad8:	f7fe f8a2 	bl	8000c20 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d10d      	bne.n	8002b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	0399      	lsls	r1, r3, #14
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <UART_CheckIdleState+0x90>)
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	0013      	movs	r3, r2
 8002afc:	2200      	movs	r2, #0
 8002afe:	f000 f82d 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e022      	b.n	8002b50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d10d      	bne.n	8002b34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	03d9      	lsls	r1, r3, #15
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <UART_CheckIdleState+0x90>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	0013      	movs	r3, r2
 8002b26:	2200      	movs	r2, #0
 8002b28:	f000 f818 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e00d      	b.n	8002b50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2274      	movs	r2, #116	; 0x74
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	01ffffff 	.word	0x01ffffff

08002b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	e05e      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	3301      	adds	r3, #1
 8002b72:	d05b      	beq.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe f854 	bl	8000c20 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11b      	bne.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	492f      	ldr	r1, [pc, #188]	; (8002c54 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2274      	movs	r2, #116	; 0x74
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e044      	b.n	8002c4c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d02e      	beq.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	401a      	ands	r2, r3
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d124      	bne.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4917      	ldr	r1, [pc, #92]	; (8002c54 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	438a      	bics	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2274      	movs	r2, #116	; 0x74
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e00f      	b.n	8002c4c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	425a      	negs	r2, r3
 8002c3c:	4153      	adcs	r3, r2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	001a      	movs	r2, r3
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d091      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffffe5f 	.word	0xfffffe5f

08002c58 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c70:	4808      	ldr	r0, [pc, #32]	; (8002c94 <ssd1306_WriteCommand+0x30>)
 8002c72:	2301      	movs	r3, #1
 8002c74:	425b      	negs	r3, r3
 8002c76:	9302      	str	r3, [sp, #8]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	2200      	movs	r2, #0
 8002c84:	2178      	movs	r1, #120	; 0x78
 8002c86:	f7fe faf3 	bl	8001270 <HAL_I2C_Mem_Write>
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	20000450 	.word	0x20000450

08002c98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4808      	ldr	r0, [pc, #32]	; (8002cc8 <ssd1306_WriteData+0x30>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4252      	negs	r2, r2
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	2178      	movs	r1, #120	; 0x78
 8002cba:	f7fe fad9 	bl	8001270 <HAL_I2C_Mem_Write>
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000450 	.word	0x20000450

08002ccc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002cd0:	f7ff ffc2 	bl	8002c58 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	f7fd ffad 	bl	8000c34 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 fa18 	bl	8003110 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002ce0:	2020      	movs	r0, #32
 8002ce2:	f7ff ffbf 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff ffbc 	bl	8002c64 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002cec:	20b0      	movs	r0, #176	; 0xb0
 8002cee:	f7ff ffb9 	bl	8002c64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002cf2:	20c8      	movs	r0, #200	; 0xc8
 8002cf4:	f7ff ffb6 	bl	8002c64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff ffb3 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002cfe:	2010      	movs	r0, #16
 8002d00:	f7ff ffb0 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d04:	2040      	movs	r0, #64	; 0x40
 8002d06:	f7ff ffad 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d0a:	20ff      	movs	r0, #255	; 0xff
 8002d0c:	f000 f9e8 	bl	80030e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d10:	20a1      	movs	r0, #161	; 0xa1
 8002d12:	f7ff ffa7 	bl	8002c64 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d16:	20a6      	movs	r0, #166	; 0xa6
 8002d18:	f7ff ffa4 	bl	8002c64 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d1c:	20a8      	movs	r0, #168	; 0xa8
 8002d1e:	f7ff ffa1 	bl	8002c64 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d22:	203f      	movs	r0, #63	; 0x3f
 8002d24:	f7ff ff9e 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d28:	20a4      	movs	r0, #164	; 0xa4
 8002d2a:	f7ff ff9b 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d2e:	20d3      	movs	r0, #211	; 0xd3
 8002d30:	f7ff ff98 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff ff95 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d3a:	20d5      	movs	r0, #213	; 0xd5
 8002d3c:	f7ff ff92 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d40:	20f0      	movs	r0, #240	; 0xf0
 8002d42:	f7ff ff8f 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002d46:	20d9      	movs	r0, #217	; 0xd9
 8002d48:	f7ff ff8c 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002d4c:	2022      	movs	r0, #34	; 0x22
 8002d4e:	f7ff ff89 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002d52:	20da      	movs	r0, #218	; 0xda
 8002d54:	f7ff ff86 	bl	8002c64 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002d58:	2012      	movs	r0, #18
 8002d5a:	f7ff ff83 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002d5e:	20db      	movs	r0, #219	; 0xdb
 8002d60:	f7ff ff80 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002d64:	2020      	movs	r0, #32
 8002d66:	f7ff ff7d 	bl	8002c64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002d6a:	208d      	movs	r0, #141	; 0x8d
 8002d6c:	f7ff ff7a 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002d70:	2014      	movs	r0, #20
 8002d72:	f7ff ff77 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002d76:	2001      	movs	r0, #1
 8002d78:	f000 f9ca 	bl	8003110 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f000 f811 	bl	8002da4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002d82:	f000 f833 	bl	8002dec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <ssd1306_Init+0xd4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <ssd1306_Init+0xd4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002d92:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <ssd1306_Init+0xd4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	715a      	strb	r2, [r3, #5]
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000448 	.word	0x20000448

08002da4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00e      	b.n	8002dd4 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <ssd1306_Fill+0x1e>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	e000      	b.n	8002dc4 <ssd1306_Fill+0x20>
 8002dc2:	21ff      	movs	r1, #255	; 0xff
 8002dc4:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <ssd1306_Fill+0x40>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <ssd1306_Fill+0x44>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d9ec      	bls.n	8002db6 <ssd1306_Fill+0x12>
    }
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000048 	.word	0x20000048
 8002de8:	000003ff 	.word	0x000003ff

08002dec <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e01a      	b.n	8002e30 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	3b50      	subs	r3, #80	; 0x50
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff ff2e 	bl	8002c64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7ff ff2b 	bl	8002c64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002e0e:	2010      	movs	r0, #16
 8002e10:	f7ff ff28 	bl	8002c64 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	01da      	lsls	r2, r3, #7
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <ssd1306_UpdateScreen+0x54>)
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff ff39 	bl	8002c98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	3201      	adds	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d9e0      	bls.n	8002dfa <ssd1306_UpdateScreen+0xe>
    }
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000048 	.word	0x20000048

08002e44 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	0004      	movs	r4, r0
 8002e4c:	0008      	movs	r0, r1
 8002e4e:	0011      	movs	r1, r2
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	1c22      	adds	r2, r4, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	1c02      	adds	r2, r0, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	1d7b      	adds	r3, r7, #5
 8002e5e:	1c0a      	adds	r2, r1, #0
 8002e60:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	db52      	blt.n	8002f12 <ssd1306_DrawPixel+0xce>
 8002e6c:	1dbb      	adds	r3, r7, #6
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b3f      	cmp	r3, #63	; 0x3f
 8002e72:	d84e      	bhi.n	8002f12 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <ssd1306_DrawPixel+0xd8>)
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8002e7c:	1d7b      	adds	r3, r7, #5
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	425a      	negs	r2, r3
 8002e82:	4153      	adcs	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	1d7b      	adds	r3, r7, #5
 8002e88:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8002e8a:	1d7b      	adds	r3, r7, #5
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d11e      	bne.n	8002ed0 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	1dbb      	adds	r3, r7, #6
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	08db      	lsrs	r3, r3, #3
 8002e9c:	b2d8      	uxtb	r0, r3
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	01db      	lsls	r3, r3, #7
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <ssd1306_DrawPixel+0xdc>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	b25a      	sxtb	r2, r3
 8002eaa:	1dbb      	adds	r3, r7, #6
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2107      	movs	r1, #7
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4099      	lsls	r1, r3
 8002eb6:	000b      	movs	r3, r1
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b259      	sxtb	r1, r3
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	01db      	lsls	r3, r3, #7
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	b2c9      	uxtb	r1, r1
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <ssd1306_DrawPixel+0xdc>)
 8002ecc:	54d1      	strb	r1, [r2, r3]
 8002ece:	e021      	b.n	8002f14 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ed0:	1dfb      	adds	r3, r7, #7
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	0003      	movs	r3, r0
 8002ede:	01db      	lsls	r3, r3, #7
 8002ee0:	18d3      	adds	r3, r2, r3
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <ssd1306_DrawPixel+0xdc>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	1dba      	adds	r2, r7, #6
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	2107      	movs	r1, #7
 8002eee:	400a      	ands	r2, r1
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4091      	lsls	r1, r2
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	b252      	sxtb	r2, r2
 8002ef8:	43d2      	mvns	r2, r2
 8002efa:	b252      	sxtb	r2, r2
 8002efc:	4013      	ands	r3, r2
 8002efe:	b259      	sxtb	r1, r3
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	0003      	movs	r3, r0
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	18d3      	adds	r3, r2, r3
 8002f0a:	b2c9      	uxtb	r1, r1
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <ssd1306_DrawPixel+0xdc>)
 8002f0e:	54d1      	strb	r1, [r2, r3]
 8002f10:	e000      	b.n	8002f14 <ssd1306_DrawPixel+0xd0>
        return;
 8002f12:	46c0      	nop			; (mov r8, r8)
    }
}
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b003      	add	sp, #12
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	20000448 	.word	0x20000448
 8002f20:	20000048 	.word	0x20000048

08002f24 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0004      	movs	r4, r0
 8002f2c:	1d38      	adds	r0, r7, #4
 8002f2e:	6001      	str	r1, [r0, #0]
 8002f30:	6042      	str	r2, [r0, #4]
 8002f32:	0019      	movs	r1, r3
 8002f34:	200f      	movs	r0, #15
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	1c22      	adds	r2, r4, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	230e      	movs	r3, #14
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	1c0a      	adds	r2, r1, #0
 8002f42:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b1f      	cmp	r3, #31
 8002f4a:	d904      	bls.n	8002f56 <ssd1306_WriteChar+0x32>
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b7e      	cmp	r3, #126	; 0x7e
 8002f54:	d901      	bls.n	8002f5a <ssd1306_WriteChar+0x36>
        return 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e078      	b.n	800304c <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	001a      	movs	r2, r3
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	18d3      	adds	r3, r2, r3
 8002f66:	2b80      	cmp	r3, #128	; 0x80
 8002f68:	dc07      	bgt.n	8002f7a <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002f6c:	885b      	ldrh	r3, [r3, #2]
 8002f6e:	001a      	movs	r2, r3
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	dd01      	ble.n	8002f7e <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e066      	b.n	800304c <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e051      	b.n	8003028 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	3b20      	subs	r3, #32
 8002f90:	1d39      	adds	r1, r7, #4
 8002f92:	7849      	ldrb	r1, [r1, #1]
 8002f94:	434b      	muls	r3, r1
 8002f96:	0019      	movs	r1, r3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	18cb      	adds	r3, r1, r3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	18d3      	adds	r3, r2, r3
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	e035      	b.n	8003016 <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d014      	beq.n	8002fe2 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	b2d8      	uxtb	r0, r3
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002fc8:	885b      	ldrh	r3, [r3, #2]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	b2d9      	uxtb	r1, r3
 8002fd4:	230e      	movs	r3, #14
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	001a      	movs	r2, r3
 8002fdc:	f7ff ff32 	bl	8002e44 <ssd1306_DrawPixel>
 8002fe0:	e016      	b.n	8003010 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	b2d8      	uxtb	r0, r3
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <ssd1306_WriteChar+0x130>)
 8002ff2:	885b      	ldrh	r3, [r3, #2]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	b2d9      	uxtb	r1, r3
 8002ffe:	230e      	movs	r3, #14
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	425a      	negs	r2, r3
 8003006:	4153      	adcs	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	f7ff ff1a 	bl	8002e44 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	3301      	adds	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	001a      	movs	r2, r3
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4293      	cmp	r3, r2
 8003020:	d3c3      	bcc.n	8002faa <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3301      	adds	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	001a      	movs	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4293      	cmp	r3, r2
 8003032:	d3a7      	bcc.n	8002f84 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <ssd1306_WriteChar+0x130>)
 8003036:	881a      	ldrh	r2, [r3, #0]
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	18d3      	adds	r3, r2, r3
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b04      	ldr	r3, [pc, #16]	; (8003054 <ssd1306_WriteChar+0x130>)
 8003044:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003046:	230f      	movs	r3, #15
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	781b      	ldrb	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b009      	add	sp, #36	; 0x24
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	20000448 	.word	0x20000448

08003058 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	1d38      	adds	r0, r7, #4
 8003062:	6001      	str	r1, [r0, #0]
 8003064:	6042      	str	r2, [r0, #4]
 8003066:	001a      	movs	r2, r3
 8003068:	1cfb      	adds	r3, r7, #3
 800306a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 800306c:	e014      	b.n	8003098 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	7818      	ldrb	r0, [r3, #0]
 8003072:	1cfb      	adds	r3, r7, #3
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	1d3a      	adds	r2, r7, #4
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	6852      	ldr	r2, [r2, #4]
 800307c:	f7ff ff52 	bl	8002f24 <ssd1306_WriteChar>
 8003080:	0003      	movs	r3, r0
 8003082:	001a      	movs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d002      	beq.n	8003092 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	e008      	b.n	80030a4 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e6      	bne.n	800306e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	781b      	ldrb	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}

080030ac <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	1c0a      	adds	r2, r1, #0
 80030bc:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <ssd1306_SetCursor+0x30>)
 80030c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	4b03      	ldr	r3, [pc, #12]	; (80030dc <ssd1306_SetCursor+0x30>)
 80030d0:	805a      	strh	r2, [r3, #2]
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	20000448 	.word	0x20000448

080030e0 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	0002      	movs	r2, r0
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80030ec:	210f      	movs	r1, #15
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	2281      	movs	r2, #129	; 0x81
 80030f2:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fdb3 	bl	8002c64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff fdae 	bl	8002c64 <ssd1306_WriteCommand>
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}

08003110 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	0002      	movs	r2, r0
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003124:	230f      	movs	r3, #15
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	22af      	movs	r2, #175	; 0xaf
 800312a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <ssd1306_SetDisplayOn+0x48>)
 800312e:	2201      	movs	r2, #1
 8003130:	719a      	strb	r2, [r3, #6]
 8003132:	e006      	b.n	8003142 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	22ae      	movs	r2, #174	; 0xae
 800313a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <ssd1306_SetDisplayOn+0x48>)
 800313e:	2200      	movs	r2, #0
 8003140:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8003142:	230f      	movs	r3, #15
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff fd8b 	bl	8002c64 <ssd1306_WriteCommand>
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	20000448 	.word	0x20000448

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	2600      	movs	r6, #0
 8003160:	4d0c      	ldr	r5, [pc, #48]	; (8003194 <__libc_init_array+0x38>)
 8003162:	4c0d      	ldr	r4, [pc, #52]	; (8003198 <__libc_init_array+0x3c>)
 8003164:	1b64      	subs	r4, r4, r5
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	42a6      	cmp	r6, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	2600      	movs	r6, #0
 800316e:	f000 f821 	bl	80031b4 <_init>
 8003172:	4d0a      	ldr	r5, [pc, #40]	; (800319c <__libc_init_array+0x40>)
 8003174:	4c0a      	ldr	r4, [pc, #40]	; (80031a0 <__libc_init_array+0x44>)
 8003176:	1b64      	subs	r4, r4, r5
 8003178:	10a4      	asrs	r4, r4, #2
 800317a:	42a6      	cmp	r6, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	00b3      	lsls	r3, r6, #2
 8003182:	58eb      	ldr	r3, [r5, r3]
 8003184:	4798      	blx	r3
 8003186:	3601      	adds	r6, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	00b3      	lsls	r3, r6, #2
 800318c:	58eb      	ldr	r3, [r5, r3]
 800318e:	4798      	blx	r3
 8003190:	3601      	adds	r6, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	0800616c 	.word	0x0800616c
 8003198:	0800616c 	.word	0x0800616c
 800319c:	0800616c 	.word	0x0800616c
 80031a0:	08006170 	.word	0x08006170

080031a4 <memset>:
 80031a4:	0003      	movs	r3, r0
 80031a6:	1812      	adds	r2, r2, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	7019      	strb	r1, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
